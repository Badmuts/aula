version: '3'
services:
  api-gateway:
    image: traefik
    ports:
      - "3000:80"
    volumes:
      - ./api-gateway.toml:/etc/traefik/traefik.toml

  tunnel:
    image: wernight/ngrok
    command: ngrok http api-gateway:80
    ports:
      - "4040:4040"

  web:
    build:
      context: .
      dockerfile: services/web/Dockerfile
    image: ${REPO:-badmuts}/aula-web:${TAG:-latest}
    volumes:
      - '/usr/src/app/node_modules'
      - './services/web:/usr/src/app'
    environment:
      - NODE_ENV=dev
    command: npm run dev

  auth-service:
    build:
      context: .
      dockerfile: packages/auth/Dockerfile
    image: ${REPO:-badmuts}/aula-auth:${TAG:-latest}
    volumes:
      - '/usr/src/app/packages/auth/node_modules'
      - './packages/auth:/usr/src/app/packages/auth'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - ACCESS_TOKEN_PUBLIC=${ACCESS_TOKEN_PUBLIC}
      - ACCESS_TOKEN_PRIVATE=${ACCESS_TOKEN_PRIVATE}
      - REFRESH_TOKEN_PRIVATE=${REFRESH_TOKEN_PRIVATE}
      - REFRESH_TOKEN_PUBLIC=${REFRESH_TOKEN_PUBLIC}
      - NATS_HOST=nats
    command: npx nodemon --exec "npm --prefix packages/auth start"
    depends_on:
      - nats

  user-service:
    build:
      context: .
      dockerfile: packages/user/Dockerfile
    image: ${REPO:-badmuts}/aula-user:${TAG:-latest}
    volumes:
      - '/usr/src/app/packages/user/node_modules'
      - './packages/user:/usr/src/app/packages/user'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - ACCESS_TOKEN_PUBLIC=${ACCESS_TOKEN_PUBLIC}
      - DB_HOST=mongo
      - DB_DATABASE=user
      - DB_USER=
      - DB_PASSWORD=
      - NATS_HOST=nats
    command: npx nodemon --exec "npm --prefix packages/user start"
    depends_on:
      - mongo
      - nats

  course-service:
    build:
      context: .
      dockerfile: packages/course/Dockerfile
    image: ${REPO:-badmuts}/aula-course:${TAG:-latest}
    volumes:
      - '/usr/src/app/packages/course/node_modules'
      - './packages/course:/usr/src/app/packages/course'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - ACCESS_TOKEN_PUBLIC=${ACCESS_TOKEN_PUBLIC}
      - DB_HOST=mongo
      - DB_DATABASE=course
      - DB_USER=
      - DB_PASSWORD=
      - NATS_HOST=nats
    command: npx nodemon --exec "npm --prefix packages/course start"
    depends_on:
      - mongo
      - nats

  search-service:
    build:
      context: .
      dockerfile: packages/search/Dockerfile
    image: ${REPO:-badmuts}/aula-search:${TAG:-latest}
    volumes:
      - '/usr/src/app/packages/search/node_modules'
      - './packages/search:/usr/src/app/packages/search'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - ACCESS_TOKEN_PUBLIC=${ACCESS_TOKEN_PUBLIC}
      - NATS_HOST=nats
    command: npx nodemon --exec "npm --prefix packages/search start"
    depends_on:
      - elastic
      - nats

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2

  websocket-service:
    build:
      context: .
      dockerfile: packages/websocket/Dockerfile
    image: ${REPO:-badmuts}/aula-websocket:${TAG:-latest}
    volumes:
      - '/usr/src/app/packages/websocket/node_modules'
      - './packages/websocket:/usr/src/app/packages/websocket'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - ACCESS_TOKEN_PUBLIC=${ACCESS_TOKEN_PUBLIC}
      - NATS_HOST=nats
    command: npx nodemon --exec "npm --prefix packages/websocket start"
    depends_on:
      - nats

  nats:
    image: nats:1.3.0

  mongo:
    image: mongo:4.1-xenial
